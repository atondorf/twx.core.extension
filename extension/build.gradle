plugins {
  id 'java-library'
}

project.ext {
  version     = file('version.txt').text.trim()
  incVersion  = false
  // extensionJar 	= project.name + "-" + version + ".jar"
  extensionJar      = project.name + ".jar"
  zipName           = project.name + "_" + version + ".zip"
  baseDir           = projectDir
  uiDir             = "${baseDir}/ui" // if there are any widgets
  configDir         = "${baseDir}/configfiles" // folder location of the metadata.xml file
  entitiesDir       = "${baseDir}/configfiles/Entities" // folder additional Entities file that you want to be included in the extension
  zipDir            = "${baseDir}/zip" // where to store the generated zip
    localJarDir           = "${rootDir}/lib/local" // if you have any jars that should be packed add them here
    commonJarDir          = "${rootDir}/lib/common" // if you have any jars that should not be packed add them here
  packageVendor     = "atondorf" // MANIFEST.MF information
  packageName       = project.name // MANIFEST.MF information
  packageTitle      = "ThingWorxExtension" // MANIFEST.MF information
  packageVersion    = version
  // Used for uploading - the address of the Thingworx server
  thingworxServerRoot   = "http://127.0.0.1:8080"
    thingworxAppKey       = "430cb457-73d7-44d3-a89d-12457c4a1ffc"
}

configurations {
  packageDependencies
  compile {
    extendsFrom packageDependencies
  }
}

repositories {
    mavenCentral()
  flatDir {
    dirs project.ext.commonJarDir
  }
  flatDir {
    dirs project.ext.localJarDir
  }
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'
  // this way you can get jars from a central repository ...
  implementation group: 'org.json', name: 'json', version: '20171018'
  implementation group: 'io.netty', name: 'netty-all', version: '4.1.30.Final'
  implementation group: 'org.apache.commons', name: 'commons-math3', version: '3.6.1'
    // all files here will not be packed in the extension.zip
    implementation fileTree(dir: project.ext.commonJarDir, include: ['*.jar'])
  // all files here will be packed into the extension.zip
  packageDependencies fileTree(dir: project.ext.localJarDir, include: ['*.jar'])
}

jar {
  archiveFileName = project.ext.extensionJar
  manifest {
    attributes(["Built-By"  : project.ext.packageVendor,
                "Build-Date": new Date().format("yyyy-MM-dd HH:mm:ss")])
    attributes(["Package-Title"  : project.ext.packageTitle,
                "Package-Version": project.ext.packageVersion,
                "Package-Vendor" : project.ext.packageVendor], project.ext.packageName
    )
  }
}

def updateMetadata() {
  def file = "${buildDir}/zip/metadata.xml"
    def parser = new groovy.util.XmlParser(false, true)
    def xml = parser.parse(file)
    // update the version number to current one ...
    xml.ExtensionPackages.ExtensionPackage.@packageVersion = project.ext.version
    xml.ExtensionPackages.ExtensionPackage.@name = project.name
    // add dependency to own jar
    xml.ExtensionPackages.ExtensionPackage.JarResources[0]?.appendNode("FileResource", [type: "JAR", file: project.ext.extensionJar])
    // add dependencies to required external jars
    for (File f: configurations.packageDependencies) {
      if (f.getName().startsWith("commons-codec") ||
        f.getName().startsWith("commons-io") ||
        f.getName().startsWith("commons-logging") ||
        f.getName().startsWith("netty") ||
        f.getName().startsWith("log4j") ||
        f.getName().startsWith("httpclient") ||
        f.getName().startsWith("httpcore") ||
        f.getName().startsWith("slf4j")) {
        continue
      } // these are the default, provided by thingworx allready ...
      	xml.ExtensionPackages.ExtensionPackage.JarResources[0]?.appendNode("FileResource", [type: "JAR", file: f.getName()])
    }
    PrintWriter pw = new PrintWriter(new File(file))
    pw.write(groovy.xml.XmlUtil.serialize(xml))
    pw.close()
}

clean.doFirst {
  delete fileTree(project.ext.zipDir).matching {
    include "**/*.zip"
  }
}

task twxVersion() {
  group = "TWX Extension"
    description = "Increment the Version of the extension by 0.0.1"
    doFirst {
    	def incstep = '0.0.1'.split(/\./).collect { it.toInteger() }
    def indexedVersion = file('version.txt').text.trim()
      def indexedVersionList = indexedVersion.split(/\./).toList().withIndex()
    	def updatedVersionList = indexedVersionList.collect { num, idx->num.toInteger() + incstep[idx] }
    def updatedVersion = updatedVersionList.join(".")

      println("Updated Version to: " + updatedVersion)

      PrintWriter pw = new PrintWriter(file('version.txt'))
      pw.write(updatedVersion)
      pw.close()
      // update Version Info ...
      project.ext.version = updatedVersion
      project.ext.zipName = project.name + "_" + updatedVersion + ".zip"
  }
}

task twxPrepare(dependsOn : jar) {
  group = "TWX Extension"
    description = "Package all Extension files in ZIP-Folder"

    doFirst {
		delete fileTree(project.ext.zipDir).matching { include "**/*.zip" }
    delete "${buildDir}/zip/"
    // add here all the jars from the packageDependencies configuration
    copy {
      from configurations.packageDependencies
      into "${buildDir}/zip/lib/common/"
    }
    // add the configuration
    copy {
      from "${project.ext.configDir}"
      into "${buildDir}/zip/"
    }
    updateMetadata()
    // add the extension jar itself
    copy {
      from "${buildDir}/libs/${project.ext.extensionJar}"
      into "${buildDir}/zip/lib/common/"
    }
    // add the ui files
    copy {
      from uiDir
      into "${buildDir}/zip/ui/"
    }
    copy {
      from entitiesDir
      into "${buildDir}/zip/Entities/"
    }
  }
}

task twxZip(type : Zip, dependsOn: twxPrepare) {
  group = "TWX Extension"
    description = "Package Extension to a single zip"

    archiveFileName = zipName
    destinationDirectory = new File(project.ext.zipDir)
    from "${buildDir}/zip/"
}


tasks.named('test') {
    // Use JUnit Platform for unit tests.
  useJUnitPlatform()
}
