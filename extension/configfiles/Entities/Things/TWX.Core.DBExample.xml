<?xml version="1.0" encoding="UTF-8"?>
<Entities
    majorVersion="9"
    minorVersion="3"
    universal="password">
    <Things>
        <Thing
            aspect.isEditableExtensionObject="true"
            aspect.isExtension="true"
            description=""
            documentationContent=""
            effectiveThingPackage="SQLThingPackage"
            enabled="true"
            homeMashup=""
            identifier=""
            inheritedValueStream=""
            name="TWX.Core.DBExample"
            projectName="TWX.Core"
            published="false"
            tags=""
            thingTemplate="SQLThing"
            valueStream="">
            <avatar></avatar>
            <DesignTimePermissions>
                <Create></Create>
                <Read></Read>
                <Update></Update>
                <Delete></Delete>
                <Metadata></Metadata>
            </DesignTimePermissions>
            <RunTimePermissions></RunTimePermissions>
            <VisibilityPermissions>
                <Visibility></Visibility>
            </VisibilityPermissions>
            <ConfigurationTableDefinitions></ConfigurationTableDefinitions>
            <ConfigurationTables>
                <ConfigurationTable
                    dataShapeName=""
                    description="Connection Monitoring Settings"
                    isMultiRow="false"
                    name="ConnectionMonitoring"
                    ordinal="0">
                    <DataShape>
                        <FieldDefinitions>
                            <FieldDefinition
                                aspect.defaultValue="30000.0"
                                aspect.friendlyName="Monitor Rate (milliseconds)"
                                baseType="NUMBER"
                                description="Monitor rate in milliseconds"
                                name="connectionMonitorRate"
                                ordinal="1"></FieldDefinition>
                            <FieldDefinition
                                aspect.defaultValue="false"
                                aspect.friendlyName="Enable Monitoring"
                                baseType="BOOLEAN"
                                description="Enable connection monitoring"
                                name="enableMonitor"
                                ordinal="0"></FieldDefinition>
                            <FieldDefinition
                                aspect.defaultValue="1.0"
                                aspect.friendlyName="Number of Retries"
                                baseType="NUMBER"
                                description="Number of retries"
                                name="numberOfRetries"
                                ordinal="2"></FieldDefinition>
                            <FieldDefinition
                                aspect.defaultValue="2000.0"
                                aspect.friendlyName="Retry Delay (milliseconds)"
                                baseType="NUMBER"
                                description="Retry delay in milliseconds"
                                name="retryDelay"
                                ordinal="3"></FieldDefinition>
                        </FieldDefinitions>
                    </DataShape>
                    <Rows>
                        <Row>
                            <connectionMonitorRate>30000.0</connectionMonitorRate>
                            <enableMonitor>false</enableMonitor>
                            <numberOfRetries>1.0</numberOfRetries>
                            <retryDelay>2000.0</retryDelay>
                        </Row>
                    </Rows>
                </ConfigurationTable>
                <ConfigurationTable
                    dataShapeName=""
                    description="Connection Provider"
                    isMultiRow="false"
                    name="ConnectionProvider"
                    ordinal="0">
                    <DataShape>
                        <FieldDefinitions>
                            <FieldDefinition
                                aspect.defaultValue="false"
                                aspect.friendlyName="Participate in platform transactions"
                                baseType="BOOLEAN"
                                description="Participate in platform transactions"
                                name="isTransactional"
                                ordinal="0"></FieldDefinition>
                            <FieldDefinition
                             aspect.defaultValue="ThingworxPersistenceProvider"
                                aspect.friendlyName="Persistence Provider Name"
                                baseType="PERSISTENCEPROVIDERNAME"
                                description="The Persistence Provider from which to retrieve connections"
                                name="persistenceProviderName"
                                ordinal="0"></FieldDefinition>
                        </FieldDefinitions>
                    </DataShape>
                    <Rows>
                        <Row>
                            <isTransactional>false</isTransactional>
                            <persistenceProviderName>
                            <![CDATA[
                            DataPersistenceProvider
                            ]]>
                            </persistenceProviderName>
                        </Row>
                    </Rows>
                </ConfigurationTable>
                <ConfigurationTable
                    dataShapeName=""
                    description="Field/Column Name Aliases"
                    isMultiRow="true"
                    name="ColumnAliases"
                    ordinal="1">
                    <DataShape>
                        <FieldDefinitions>
                            <FieldDefinition
                                aspect.friendlyName="Database Column Name"
                                baseType="STRING"
                                description="Database column name"
                                name="columnName"
                                ordinal="0"></FieldDefinition>
                            <FieldDefinition
                                aspect.friendlyName="Thingworx Field Name"
                                baseType="STRING"
                                description="Thingworx field name"
                                name="fieldName"
                                ordinal="1"></FieldDefinition>
                        </FieldDefinitions>
                    </DataShape>
                    <Rows></Rows>
                </ConfigurationTable>
            </ConfigurationTables>
            <ThingShape>
                <PropertyDefinitions>
                    <PropertyDefinition
                     aspect.cacheTime="0.0"
                     aspect.dataChangeType="VALUE"
                     aspect.isIndexed="false"
                     aspect.isPersistent="false"
                     baseType="BLOB"
                     category=""
                     description=""
                     isLocalOnly="false"
                     name="blob"
                     ordinal="2"></PropertyDefinition>
                    <PropertyDefinition
                     aspect.cacheTime="0.0"
                     aspect.dataChangeType="VALUE"
                     baseType="DATETIME"
                     category=""
                     description=""
                     isLocalOnly="false"
                     name="date"
                     ordinal="3"></PropertyDefinition>
                    <PropertyDefinition
                     aspect.cacheTime="0.0"
                     aspect.dataChangeType="VALUE"
                     baseType="GUID"
                     category=""
                     description=""
                     isLocalOnly="false"
                     name="guid"
                     ordinal="4"></PropertyDefinition>
                    <PropertyDefinition
                     aspect.cacheTime="0.0"
                     aspect.dataChangeType="VALUE"
                     aspect.defaultValue="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&#xA;Hj6Snumb3umfHupBOiAAADs="
                     aspect.isIndexed="false"
                     aspect.isPersistent="false"
                     baseType="IMAGE"
                     category=""
                     description=""
                     isLocalOnly="false"
                     name="image"
                     ordinal="5"></PropertyDefinition>
                    <PropertyDefinition
                     aspect.cacheTime="0.0"
                     aspect.dataChangeType="VALUE"
                     baseType="INTEGER"
                     category=""
                     description=""
                     isLocalOnly="false"
                     name="int"
                     ordinal="7"></PropertyDefinition>
                    <PropertyDefinition
                     aspect.cacheTime="0.0"
                     aspect.dataChangeType="VALUE"
                     baseType="LONG"
                     category=""
                     description=""
                     isLocalOnly="false"
                     name="long"
                     ordinal="8"></PropertyDefinition>
                    <PropertyDefinition
                     aspect.cacheTime="0.0"
                     aspect.dataChangeType="VALUE"
                     baseType="NUMBER"
                     category=""
                     description=""
                     isLocalOnly="false"
                     name="number"
                     ordinal="9"></PropertyDefinition>
                    <PropertyDefinition
                     aspect.cacheTime="0.0"
                     aspect.dataChangeType="VALUE"
                     aspect.dataShape="EntityList"
                     aspect.defaultValue="{&quot;rows&quot;:[{&quot;name&quot;:&quot;1&quot;,&quot;description&quot;:&quot;One&quot;},{&quot;name&quot;:&quot;2&quot;,&quot;description&quot;:&quot;Two&quot;}],&quot;dataShape&quot;:{&quot;fieldDefinitions&quot;:{&quot;name&quot;:{&quot;name&quot;:&quot;name&quot;,&quot;aspects&quot;:{&quot;isPrimaryKey&quot;:true},&quot;description&quot;:&quot;Entity name&quot;,&quot;baseType&quot;:&quot;STRING&quot;,&quot;ordinal&quot;:0},&quot;description&quot;:{&quot;name&quot;:&quot;description&quot;,&quot;aspects&quot;:{},&quot;description&quot;:&quot;Entity description&quot;,&quot;baseType&quot;:&quot;STRING&quot;,&quot;ordinal&quot;:0}}}}"
                     aspect.isIndexed="false"
                     aspect.isPersistent="false"
                     baseType="INFOTABLE"
                     category=""
                     description=""
                     isLocalOnly="false"
                     name="table"
                     ordinal="6"></PropertyDefinition>
                </PropertyDefinitions>
                <ServiceDefinitions>
                    <ServiceDefinition
                        aspect.isAsync="false"
                        category=""
                        description=""
                        isAllowOverride="false"
                        isLocalOnly="false"
                        isOpen="false"
                        isPrivate="false"
                        name="exBuilder">
                        <ResultType
                            baseType="JSON"
                            description=""
                            name="result"
                            ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                        aspect.isAsync="false"
                        category=""
                        description=""
                        isAllowOverride="false"
                        isLocalOnly="false"
                        isOpen="false"
                        isPrivate="false"
                     name="Test_Argument">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="Test_AutoCommit">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                        name="Test_DBConnection">
                        <ResultType
                            baseType="INFOTABLE"
                            description=""
                            name="result"
                            ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                        aspect.isAsync="false"
                        category=""
                        description=""
                        isAllowOverride="false"
                        isLocalOnly="false"
                        isOpen="false"
                        isPrivate="false"
                        name="Test_DBInfo">
                        <ResultType
                            baseType="JSON"
                            description=""
                            name="result"
                            ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                        aspect.isAsync="false"
                        category=""
                        description=""
                        isAllowOverride="false"
                        isLocalOnly="false"
                        isOpen="false"
                        isPrivate="false"
                        name="Test_DBInsert">
                        <ResultType
                            baseType="INTEGER"
                            description=""
                            name="result"
                            ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                        aspect.isAsync="false"
                        category=""
                        description=""
                        isAllowOverride="false"
                        isLocalOnly="false"
                        isOpen="false"
                        isPrivate="false"
                     name="Test_DBInsert_AutoCommit">
                        <ResultType
                         baseType="INTEGER"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                        name="Test_DBPrepared">
                        <ResultType
                            baseType="INFOTABLE"
                            description=""
                            name="result"
                            ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                </ServiceDefinitions>
                <EventDefinitions></EventDefinitions>
                <ServiceMappings></ServiceMappings>
                <ServiceImplementations>
                    <ServiceImplementation
                        description=""
                        handlerName="Script"
                        name="exBuilder">
                        <ConfigurationTables>
                            <ConfigurationTable
                                dataShapeName=""
                                description=""
                                isMultiRow="false"
                                name="Script"
                                ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                            baseType="STRING"
                                            description="code"
                                            name="code"
                                            ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        result = {};
                                        require_core_db();
                                        let builder = new QueryBuilder();
                                        builder.select("*").from("test");
                                        result.sql1 = builder.toString();
                                        //let builder = core_db_getQueryBuilder();
                                        
                                        require_core_util();
                                        
                                        result.native = core_argTest( { hallo: "1" } );
                                        
                                        let tab	= DataShapes["EntityList"].CreateValues(); 
                                        tab.AddRow( { name: "Hallo" } );
                                        tab.AddRow( { name: "Welt" } );
                                        // result.tableJSON = tab.toJSON();
                                        
                                        result.infotable = core_argTest( tab );
                                        result.tableRow = core_argTest( tab[0] );
                                        result.json = core_argTest( tab[0].toJSON() );
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="Test_Argument">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        require_core_db();
                                        let con = null;
                                        result = { Hallo: "Welt" };
                                        // DBConnection with AutoCommit ... 
                                        try {
                                        	con = new DBConnection( me.name, true );
                                            result = con.argTest( {
                                            	numeric: 1,
                                                string: "Welt",
                                                date_js: new Date(),
                                                date_twx: me.date,
                                                blob: me.blob,
                                                guid: me.guid,
                                                image: me.image,
                                                int: me.int,
                                                long: me.long,
                                                num: me.number,
                                                table: me.table,
                                                valCol: me.table[0]
                                            } );
                                        }
                                        catch(ex) {
                                            if( con != null ) 
                                                con.rollback();
                                            logger.error("Thing [{}] Service [{}] error at line [{}] : {}", me.name, ex.fileName, ex.lineNumber, ex);
                                            result.error = true;
                                        }
                                        finally {
                                            if ( con != null ) 
                                                con.close();
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="Test_AutoCommit">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        require_core_db();
                                        
                                        let con = null;
                                        let stm = null;
                                        result = {};
                                        // DBConnection with AutoCommit ... 
                                        try {
                                        	con = new DBConnection( me.name, true );
                                           
                                            result.name = me.name;
                                            result.autoCommit1 = con.isAutoCommit();
                                            
                                            stm = con.createStatement();
                                        
                                        	result.autoCommit2 = con.isAutoCommit();
                                        	
                                            let tab = stm.executeUpdate("INSERT INTO data.test (val) VALUES('Auto-Commited');");
                                        
                                            result.autoCommit3 = con.isAutoCommit();
                                            con.close();
                                        }
                                        catch(ex) {
                                            if( con != null ) 
                                                con.rollback();
                                            logger.error("Thing [{}] Service [{}] error at line [{}] : {}", me.name, ex.fileName, ex.lineNumber, ex);
                                            result.error = true;
                                        }
                                        finally {
                                            if ( con != null ) 
                                                con.close();
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                        description=""
                        handlerName="Script"
                        name="Test_DBConnection">
                        <ConfigurationTables>
                            <ConfigurationTable
                                dataShapeName=""
                                description=""
                                isMultiRow="false"
                                name="Script"
                                ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                            baseType="STRING"
                                            description="code"
                                            name="code"
                                            ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        require_core_db();
                                        
                                        let con = null;
                                        let stm = null;
                                        try {
                                        	con = new DBConnection( me.name, false );
                                            stm = con.createStatement();
                                            
                                            let sql = "";
                                            sql  = "IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'data') ";
                                        	sql += "EXEC('CREATE SCHEMA data')";
                                            stm.executeUpdate(sql);
                                            
                                            sql  = "IF NOT EXISTS ( SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'data' AND TABLE_NAME = 'test' ) ";
                                            sql += "CREATE TABLE data.test ( id int IDENTITY(0,1) NOT NULL, val VARCHAR(255), ts DATETIME2 NULL, PRIMARY KEY (id) );"; 
                                        	stm.executeUpdate(sql);
                                            
                                            sql = "INSERT INTO data.test (val) VALUES('hallo');";
                                            stm.executeUpdate(sql);
                                            
                                            sql = "SELECT * FROM data.test";
                                            result = stm.executeQuery(sql);
                                            
                                            con.commit();
                                        }
                                        catch(ex) {
                                            logger.error("Thing [{}] Service [{}] error at line [{}] : {}", me.name, ex.fileName, ex.lineNumber, ex);
                                            if( con != null ) con.rollback();
                                        }
                                        finally {
                                            // if ( stm != null ) stm.close(); 
                                            if ( con != null ) con.close();
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                        description=""
                        handlerName="Script"
                        name="Test_DBInfo">
                        <ConfigurationTables>
                            <ConfigurationTable
                                dataShapeName=""
                                description=""
                                isMultiRow="false"
                                name="Script"
                                ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                            baseType="STRING"
                                            description="code"
                                            name="code"
                                            ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        require_core_db();
                                        
                                        let con = null;
                                        let stm = null;
                                        try {
                                        	con = new DBConnection( me.name, false );
                                        	
                                            result = con.getSpec();
                                            result.Catalog = con.getCatalog();
                                            result.ThingName = con.getThingName();
                                            result.Schemas = con.getSchemas();
                                            result.Tables  = con.getTables("data");
                                            result.Columns = con.getColumns("data", "test");
                                            
                                        }
                                        catch(ex) {
                                            logger.error("Thing [{}] Service [{}] error at line [{}] : {}", me.name, ex.fileName, ex.lineNumber, ex);
                                            if( con != null ) con.rollback();
                                            result = -1;
                                        }
                                        finally {
                                            // if ( stm != null ) stm.close(); 
                                            if ( con != null ) con.close();
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                        description=""
                        handlerName="Script"
                        name="Test_DBInsert">
                        <ConfigurationTables>
                            <ConfigurationTable
                                dataShapeName=""
                                description=""
                                isMultiRow="false"
                                name="Script"
                                ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                            baseType="STRING"
                                            description="code"
                                            name="code"
                                            ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        require_core_db();
                                        
                                        let con = null;
                                        let stm = null;
                                        // DBConnection with Manual-Commit ... 
                                        try {
                                        	con = new DBConnection( me.name, false );
                                            stm = con.createStatement();
                                            result = stm.executeUpdate("INSERT INTO data.test (val) VALUES('Manual-Commited');");
                                            con.commit();	// without this ... the changes will not be seen in DB, as no commit ... 
                                        }
                                        catch(ex) {
                                            if( con != null ) con.rollback();
                                            result = -1;
                                        }
                                        finally {
                                            if ( con != null ) con.close();
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="Test_DBInsert_AutoCommit">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        require_core_db();
                                        let con = null;
                                        let stm = null;
                                        // DBConnection with AutoCommit ... 
                                        try {
                                        	con = new DBConnection( me.name, true );
                                            stm = con.createStatement();
                                            result = stm.executeUpdate("INSERT INTO data.test (val) VALUES('Auto-Commited');");
                                            con.commit(); // it's not working without ... why ???
                                        }
                                        catch(ex) {
                                            if( con != null ) 
                                                con.rollback();
                                            logger.error("Thing [{}] Service [{}] error at line [{}] : {}", me.name, ex.fileName, ex.lineNumber, ex);
                                            
                                            result = -1;
                                        }
                                        finally {
                                            if( con != null )
                                            	con.close();
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                        description=""
                        handlerName="Script"
                        name="Test_DBPrepared">
                        <ConfigurationTables>
                            <ConfigurationTable
                                dataShapeName=""
                                description=""
                                isMultiRow="false"
                                name="Script"
                                ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                            baseType="STRING"
                                            description="code"
                                            name="code"
                                            ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        require_core_db();
                                        
                                        let con = null;
                                        // DBConnection with AutoCommit ... 
                                        try {
                                        	con = new DBConnection( me.name, false );
                                        	let pstmt = con.prepareStatement("INSERT INTO data.test (val,ts) VALUES(?,?)");
                                            pstmt.set(1,"Hallo");
                                            pstmt.set(2, new Date() );
                                        	pstmt.executeUpdate();
                                        
                                            con.commit();
                                        
                                            let stmt = con.createStatement();
                                            result = stmt.executeQuery("SELECT * FROM data.test");
                                        }
                                        catch(ex) {
                                            logger.error("Thing [{}] Service [{}] error at line [{}] : {}", me.name, ex.fileName, ex.lineNumber, ex);
                                            if( con != null ) con.rollback();
                                            result = null;
                                        }
                                        finally {
                                            if ( con != null ) con.close();
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                </ServiceImplementations>
                <Subscriptions></Subscriptions>
            </ThingShape>
            <PropertyBindings></PropertyBindings>
            <RemotePropertyBindings></RemotePropertyBindings>
            <RemoteServiceBindings></RemoteServiceBindings>
            <RemoteEventBindings></RemoteEventBindings>
            <AlertConfigurations>
                <AlertDefinitions
                 name="blob"></AlertDefinitions>
                <AlertDefinitions
                 name="date"></AlertDefinitions>
                <AlertDefinitions
                 name="guid"></AlertDefinitions>
                <AlertDefinitions
                 name="image"></AlertDefinitions>
                <AlertDefinitions
                 name="int"></AlertDefinitions>
                <AlertDefinitions
                 name="long"></AlertDefinitions>
                <AlertDefinitions
                 name="number"></AlertDefinitions>
                <AlertDefinitions
                 name="table"></AlertDefinitions>
            </AlertConfigurations>
            <ImplementedShapes>
                <ImplementedShape
                    name="TWX.Core.Database_TS"
                    type="ThingShape"></ImplementedShape>
            </ImplementedShapes>
            <ThingProperties></ThingProperties>
        </Thing>
    </Things>
</Entities>
