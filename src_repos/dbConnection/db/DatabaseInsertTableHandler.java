package twx.core.db;

import com.google.common.collect.Maps;
import com.thingworx.common.exceptions.ThingworxRuntimeException;
import com.thingworx.datashape.DataShape;
import com.thingworx.metadata.FieldDefinition;
import com.thingworx.types.collections.ValueCollection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.Map;
import java.util.Optional;
import org.apache.commons.lang3.Validate;
import org.apache.commons.lang3.tuple.Pair;

public class DatabaseInsertTableHandler extends AbstractDatabaseTableHandler {
  private Map<String, Pair<Integer, Pair<FieldDatabaseInfo, Integer>>> fieldIndexMap = Maps.newHashMap();
  
  private ValueCollection valueCollection;
  
  DatabaseInsertTableHandler(DataShape dataShape, ValueCollection valueCollection, DatabaseHandler databaseHandler) {
    super(dataShape, databaseHandler);
    Validate.notNull(valueCollection, "Row to insert can't be null", new Object[0]);
    this.valueCollection = valueCollection;
  }
  
  protected String createStatement(DataShape dataShape) {
    return generateInsert(dataShape);
  }
  
  private String generateInsert(DataShape dataShape) {
    StringBuilder sqlInsert = new StringBuilder("INSERT INTO " + getTableName(dataShape) + "(");
    StringBuilder values = new StringBuilder("VALUES (");
    int index = 1;
    for (FieldDefinition fieldDefinition : dataShape.getFields().values()) {
      if (fieldDefinition.isPrimaryKey() && isPrimaryKeyAutoGenerated())
        continue; 
      String columnName = getColumnName(fieldDefinition);
      if (this.valueCollection.containsKey(fieldDefinition.getName())) {
        Optional<FieldDatabaseInfo> foundField = getFieldDatabaseInfo(fieldDefinition.getName());
        FieldDatabaseInfo fieldDatabaseInfo = foundField.isPresent() ? foundField.get() : null;
        Optional<Integer> foundType = getSqlTypeKey(fieldDefinition, fieldDatabaseInfo);
        if (foundType.isPresent()) {
          sqlInsert.append(' ').append(columnName).append(',');
          values.append(" ?,");
          this.fieldIndexMap.put(fieldDefinition.getName(), 
              Pair.of(Integer.valueOf(index), Pair.of(fieldDatabaseInfo, foundType.get())));
          index++;
        } 
      } 
    } 
    if (this.fieldIndexMap.isEmpty())
      throw new ThingworxRuntimeException("Nothing to insert " + dataShape.getName()); 
    if (sqlInsert.toString().endsWith(","))
      sqlInsert = new StringBuilder(sqlInsert.substring(0, sqlInsert.length() - 1)); 
    if (values.toString().endsWith(","))
      values = new StringBuilder(values.substring(0, values.length() - 1)); 
    sqlInsert.append(") ").append(values).append(')');
    return sqlInsert.toString();
  }
  
  protected void setParameter(PreparedStatement preparedStatement, DataShape dataShape) throws SQLException {
    for (FieldDefinition fieldDefinition : dataShape.getFields().values()) {
      if (fieldDefinition.isPrimaryKey() && isPrimaryKeyAutoGenerated())
        continue; 
      if (this.fieldIndexMap.containsKey(fieldDefinition.getName())) {
        Pair<Integer, Pair<FieldDatabaseInfo, Integer>> index = this.fieldIndexMap.get(fieldDefinition.getName());
        Object value = null;
        if (this.valueCollection.has(fieldDefinition.getName()))
          value = this.valueCollection.getValue(fieldDefinition.getName()); 
        if (value != null) {
          value = getSqlValue(value, fieldDefinition, (FieldDatabaseInfo)((Pair)index.getRight()).getLeft());
          preparedStatement.setObject(((Integer)index.getLeft()).intValue(), value, ((Integer)((Pair)index.getRight()).getRight()).intValue());
          continue;
        } 
        preparedStatement.setNull(((Integer)index.getLeft()).intValue(), ((Integer)((Pair)index.getRight()).getRight()).intValue());
      } 
    } 
  }
  
  protected Object getPrimaryKeyValue() {
    return getValueCollection().getValue(getPrimaryKey(getDataShape()).getName());
  }
  
  protected ValueCollection getValueCollection() {
    return this.valueCollection;
  }
  
  public Optional<DataChange> getDataChange() {
    if (!isAdditionalPropertiesDataShape())
      return Optional.of(new DataChange(ActionType.CREATE, getDataShape().getName(), 
            getValueCollection().clone())); 
    return Optional.empty();
  }
  
  void postExecute(QueryResult queryResult) throws Exception {
    if (queryResult.updateSuccessful() && isPrimaryKeyAutoGenerated() && queryResult
      .getRows().size() > 0) {
      ResultRow row = queryResult.getRows().get(0);
      FieldDefinition fieldDefinition = getPrimaryKey(getDataShape());
      Object primaryKey = row.getValues().get(getColumnName(fieldDefinition));
      this.valueCollection.SetValue(fieldDefinition, primaryKey);
    } 
  }
  
  String getErrorMessage() {
    return "Error on insert data shape: " + getDataShape().getName() + " row: " + (
      (this.valueCollection != null) ? this.valueCollection.toString() : "null");
  }
}
