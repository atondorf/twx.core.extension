/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package twx.core;

import java.io.InputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.Scanner;

import org.json.JSONObject;
import org.json.JSONTokener;

import com.microsoft.sqlserver.jdbc.SQLServerDataSource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import ch.qos.logback.classic.LoggerContext;
import ch.qos.logback.core.util.StatusPrinter;

import twx.core.db.ConnectionManager;
import twx.core.db.impl.DataSourceConnectionManager;
import twx.core.db.model.DbModel;

public class App {

    final static Logger logger = LoggerFactory.getLogger(App.class);

    static final String DB_URL  = "jdbc:sqlserver://localhost:1433;database=twdata;";
    static final String USER    = "twx";
    static final String PASS    = "twx@1234";
    static final String appName = "TWX-Data";

    SQLServerDataSource     ds          = null;
    ConnectionManager       conMgr      = null;
    //  DbHandler               handler     = null;

    public static void main(String[] args) {
        var app = new App();
        var scanner = new Scanner(System.in);
        logger.info("---------- Start-App ----------");
        Connection con = null;
        try {
            app.checkLogger();
            app.openDBConnection();
//            app.queryModelFromDB();
            //            app.manualModel();

//          app.queryModelFromDB();
//            app.createTable();
//            app.queryModelFromDB();
//          app.loadModelFromJSON();

        } catch (SQLException e) {
            printSQLException(e);
        } catch (Exception e) {
            logger.error("Exception: " + e.toString() );
        } finally {
            app.closeDBConnection();
        }
        logger.info("---------- Exit-App ----------");
    }  

    private void checkLogger() {
         // print internal state
         LoggerContext lc = (LoggerContext) LoggerFactory.getILoggerFactory();
         StatusPrinter.print(lc);
         
         logger.debug("Hello world.");        
         logger.info(logger.getClass().getName());
    }

    public void loadModelFromJSON() throws Exception {
        logger.info("---------- loadModelFromFile ----------");
        InputStream is = App.class.getResourceAsStream("/db1.json");
        if (is == null) {
            throw new NullPointerException("Cannot find resource file " + "db1.json");
        }
        JSONTokener tokener = new JSONTokener(is);
        JSONObject dbInfo = new JSONObject(tokener);
/*
        var model = new DbModel(appName);
        model.fromJSON(dbInfo);
 
        logger.info(model.toJSON().toString(2));          
*/         
    }

    public void dropTable() throws Exception {
        var con = this.ds.getConnection();
        var st = con.createStatement();
        String sql = "DROP TABLE test_1 "; 

        st.execute(sql);
        con.commit();

    }

    public void createTable() throws Exception {
        var con = this.ds.getConnection();
        var st = con.createStatement();
        
        String sql =    "CREATE TABLE test_1 ( " + 
                        "id_1 int NOT NULL," + 
                        "id_2 int NOT NULL," + 
                        "PRIMARY KEY (id_1,id_2)" +
                        ")";
        st.execute(sql);
        con.commit();
    }

    protected void openDBConnection() throws Exception {
        logger.info("---------- openDBConnection ----------");
        DriverManager.registerDriver(new com.microsoft.sqlserver.jdbc.SQLServerDriver());
        this.ds = new SQLServerDataSource();
        this.ds.setUser("twx");
        this.ds.setPassword("twx@1234");
        this.ds.setServerName("localhost");
        this.ds.setPortNumber(1433);
        this.ds.setDatabaseName("twdata");
        this.ds.setApplicationName("TWX-Data");

        this.conMgr = new DataSourceConnectionManager(ds);
    }

    protected void closeDBConnection() {
        logger.info("---------- closeDBConnection ----------");
    }

    protected static void printSQLException(SQLException ex) {
        for (Throwable e : ex) {
            if (e instanceof SQLException) {
                e.printStackTrace(System.err);
                System.err.println("SQLState: " + ((SQLException) e).getSQLState());
                System.err.println("Error Code: " + ((SQLException) e).getErrorCode());
                System.err.println("Message: " + e.getMessage());
                Throwable t = ex.getCause();
                while (t != null) {
                    System.out.println("Cause: " + t);
                    t = t.getCause();
                }
            }
        }
    }
}
