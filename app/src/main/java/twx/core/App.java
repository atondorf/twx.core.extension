/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package twx.core;

import java.io.FileReader;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Scanner;

import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONTokener;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.microsoft.sqlserver.jdbc.SQLServerDataSource;

import twx.core.db.IDatabaseHandler;
import twx.core.db.imp.MsSQLDatabaseHandler;
import twx.core.db.model.DbModel;

public class App {

    final static Logger logger = LoggerFactory.getLogger(App.class);

    static final String DB_URL  = "jdbc:sqlserver://localhost:1433;database=twdata;";
    static final String USER    = "twx";
    static final String PASS    = "twx@1234";
    static final String appName = "TWX-Data";

    SQLServerDataSource     ds          = null;
    Connection              con         = null;

    public static void main(String[] args) {
        var app = new App();
        var scanner = new Scanner(System.in);
        logger.info("---------- Start-App ----------");
        Connection con = null;
        try {
            app.openDBConnection();
            app.queryModelFromDB();
            app.loadModelFromJSON();

        } catch (SQLException e) {
            printSQLException(e);
        } catch (Exception e) {
            logger.error("Exception: " + e.toString() );
        } finally {
            app.closeDBConnection();
        }
        logger.info("---------- Exit-App ----------");
    }  

    public void loadModelFromJSON() throws Exception {
        logger.info("---------- loadModelFromFile ----------");
        InputStream is = App.class.getResourceAsStream("/db1.json");
        if (is == null) {
            throw new NullPointerException("Cannot find resource file " + "db1.json");
        }
        JSONTokener tokener = new JSONTokener(is);
        JSONObject dbInfo = new JSONObject(tokener);

        var model = new DbModel(appName);
        model.fromJSON(dbInfo);

        logger.info(model.toJSON().toString(2));          
    }

    public void queryModelFromDB() throws Exception {
        logger.info("---------- queryModelFromDB ----------");
        IDatabaseHandler handler = new MsSQLDatabaseHandler(this.con, App.appName);
        var model = handler.queryModel();
        logger.info(model.toJSON().toString(2));  
    }

    protected void openDBConnection() throws Exception {
        logger.info("---------- openDBConnection ----------");
        DriverManager.registerDriver(new com.microsoft.sqlserver.jdbc.SQLServerDriver());
        this.ds = new SQLServerDataSource();
        this.ds.setUser("twx");
        this.ds.setPassword("twx@1234");
        this.ds.setServerName("localhost");
        this.ds.setPortNumber(1433);
        this.ds.setDatabaseName("twdata");
        this.ds.setApplicationName("TWX-Data");
        this.con = ds.getConnection();
        
        logger.info(con.getCatalog());
        logger.info(con.getSchema());
        logger.info(ds.getApplicationName());
    }

    protected void closeDBConnection() {
        logger.info("---------- closeDBConnection ----------");
        if (this.con != null) {
            try {
                this.con.close();
            } catch (SQLException e) {
                printSQLException(e);
            }
        }
    }

    protected static void printSQLException(SQLException ex) {
        for (Throwable e : ex) {
            if (e instanceof SQLException) {
                e.printStackTrace(System.err);
                System.err.println("SQLState: " + ((SQLException) e).getSQLState());
                System.err.println("Error Code: " + ((SQLException) e).getErrorCode());
                System.err.println("Message: " + e.getMessage());
                Throwable t = ex.getCause();
                while (t != null) {
                    System.out.println("Cause: " + t);
                    t = t.getCause();
                }
            }
        }
    }
}
